<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CS61A - 标签 - iris</title>
        <link>https://blog.ginshio.org/tags/cs61a/</link>
        <description>CS61A - 标签 - iris</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>ginshio78@gmail.com (GinShio)</managingEditor>
            <webMaster>ginshio78@gmail.com (GinShio)</webMaster><lastBuildDate>Sun, 12 Feb 2023 14:41:28 &#43;0800</lastBuildDate><atom:link href="https://blog.ginshio.org/tags/cs61a/" rel="self" type="application/rss+xml" /><item>
    <title>数据抽象</title>
    <link>https://blog.ginshio.org/2023/cs61a_03_data_abstractions/</link>
    <pubDate>Sun, 12 Feb 2023 14:41:28 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2023/cs61a_03_data_abstractions/</guid>
    <description><![CDATA[容器 Lists在 scheme 中一类最基础的异构数据结构即 list
1 2 (list 1 2 3 &#34;str&#34;) &#39;(1 2 3 &#34;str&#34;) 当然 list 可以看作是个二元组 pair，也有称作 dotlist
1 2 3 4 5 6 7 8 (cons 1 2) ;; &#39;(1 . 2) (cons 1 &#39;(2)) ;; &#39;(1 2) (cons* 1 2 3 4) ;; &#39;(1 2 3 . 4) &#39;(1 . (2 . (3 . 4))) (cons* 1 2 &#39;(3 4)) ;; &#39;(1 2 3 4) &#39;(1 .]]></description>
</item><item>
    <title>控制流、递归、高阶函数</title>
    <link>https://blog.ginshio.org/2022/cs61a_02_control_and_higher_order_functions/</link>
    <pubDate>Sun, 25 Sep 2022 14:26:28 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2022/cs61a_02_control_and_higher_order_functions/</guid>
    <description><![CDATA[控制流解释器所执行语句来执行某些操作。
比如这整个复合语句 (compound statement)，在 Python 中由 def 声明；标头 header 确定了一个简易语句 (clause) 的类型，这个语句中跟随了一个语句序列 (suite)。解释器会按一定顺序执行这个语句序列。
条件语句条件语句在大部分语言中以 if 关键字呈现。
在 Python 中 True 和 False 分别表示真或假，if 引导条件语句及其真分支，零或一个 else 引导假分支，其中还可能会有零或多个 elif 进行嵌套。
1 2 3 4 5 6 7 def absolute_value(n): if n &lt; 0: return -n elif n == 0: return 0 else: return n 在 scheme 中 #t 和 #f 分别表示真或假，语法的话就不能 elif 进行嵌套了 (if test consequent alternative)
1 2 (define (absolute-value n) (if (positive?]]></description>
</item><item>
    <title>CS61A 入门</title>
    <link>https://blog.ginshio.org/2022/cs61a_01_getting_started/</link>
    <pubDate>Sun, 18 Sep 2022 22:03:30 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2022/cs61a_01_getting_started/</guid>
    <description><![CDATA[虽然 CS61A 使用 Python 进行教学，但我希望好好学一下 Erlang 和 Scheme。如果想查看更多关于 CS61A 的信息，请访问 课程主页，当然我也会将一部分内容和实现放在自己的 repo 中。
scheme 有很多不同的实现，而大多实现不兼容。因此我使用的是 MIT/GNU Scheme。
Lab00: Getting Startted (入门)首先搭建一个环境，CS61A 中指 Python3 环境。
Setup: 以下是本课程所用到的基础软件，也是重要的组件。 终端 (Terminal)：安装一个终端可以让你运行本课程的 OK 命令 编程环境 (Environment)：编程环境是必须的，当然课程需要的是 Python3.7，这样你才可以运行 OK 命令 文本编辑器 (Text Editor)：VSCode、Atom 什么都行，只要能用来写代码 练习使用终端，并组织你的项目文件 学习 Python 基础 做一个练习 安装 安装终端在 MacOS 和 Linux 中本身就自带了终端软件 (Terminal)，如果是 KDE，终端软件被称作 Konsole。而 Windows 中，直接在 Store 中下载 Windows Terminal 即可。当然 Windows 下推荐使用 WSL，但是系统不是关注的重点。
安装语言环境最低要求 Python3.7，因为这是运行 OK 命令的必要条件。当然你也可以使用别的编程语言。
Windows 下，你可以在这里下载 Python3 或 erlang。安装之后将路径添加到 PATH 系统环境变量中。如果你用 WSL 那和 Linux 下没什么区别。]]></description>
</item></channel>
</rss>
