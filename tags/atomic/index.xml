<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Atomic - 标签 - iris</title>
        <link>https://blog.ginshio.org/tags/atomic/</link>
        <description>Atomic - 标签 - iris</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ginshio78@gmail.com (GinShio)</managingEditor>
            <webMaster>ginshio78@gmail.com (GinShio)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 05 Dec 2020 17:46:52 &#43;0800</lastBuildDate><atom:link href="https://blog.ginshio.org/tags/atomic/" rel="self" type="application/rss+xml" /><item>
    <title>原子操作</title>
    <link>https://blog.ginshio.org/2020/cpp_concurrency_atomic/</link>
    <pubDate>Sat, 05 Dec 2020 17:46:52 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2020/cpp_concurrency_atomic/</guid>
    <description><![CDATA[<h2 id="原子操作" class="headerLink">
    <a href="#%e5%8e%9f%e5%ad%90%e6%93%8d%e4%bd%9c" class="header-mark"></a>原子操作</h2><p>原子操作是一个不可分割的操作，系统的所有线程不会观察到原子操作完成了一半。如果读取对象的加载操作是原子的，那么这个对象的所有修改操作也是原子的。</p>
<p>标准原子类型全部定义于头文件 <em>atomic</em> 中，这些类型的操作都是原子的，但是其内部实现可能使用原子操作或互斥量模拟，所以原子操作可以替代互斥量完成同步操作，但是如果内部使用互斥量实现那么不会有性能提升。</p>]]></description>
</item></channel>
</rss>
