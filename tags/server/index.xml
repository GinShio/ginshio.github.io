<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Server - 标签 - iris</title>
        <link>https://blog.ginshio.org/tags/server/</link>
        <description>Server - 标签 - iris</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>ginshio78@gmail.com (GinShio)</managingEditor>
            <webMaster>ginshio78@gmail.com (GinShio)</webMaster><lastBuildDate>Sun, 09 May 2021 18:28:44 &#43;0800</lastBuildDate><atom:link href="https://blog.ginshio.org/tags/server/" rel="self" type="application/rss+xml" /><item>
    <title>使用 KMS 激活 Microsoft 软件</title>
    <link>https://blog.ginshio.org/2021/kms/</link>
    <pubDate>Sun, 09 May 2021 18:28:44 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2021/kms/</guid>
    <description><![CDATA[微软的软件主要可以通过以下三个渠道获取:
零售 原始设备制造商 (OEM) 批量许可协议 OEM 在工厂执行激活，比如说新买的笔记本电脑自带的系统就是这种方式。零售主要通过联机、电话或 VAMT 代理激活。批量激活产品主要选择 MAK (多次激活密钥) 、 KMS (密钥管理服务) 以及 AD (Active Directory) 进行激活。
KMS 可以在本地网络完成激活，而无需将个别计算机连接到 Microsoft 进行产品激活。KMS 不需要专用系统的轻型服务，可以轻易地将其联合托管在提供其他服务的系统上。
KMS 服务器可以为局域网内所有连接的产品进行周期性激活，激活周期一般为 180 天，产品激活后会定期连接 KMS 服务器进行验证、续期，如果不能连接到服务器在激活周期过后，产品将过期而需要重新激活。
KMS 服务激活的是 VL 版，而我们常用的 RTL (零售版) 是无法激活的。自己搭建 KMS 服务器激活产品，虽然可以正常使用，但是不能算正版软件，请支持正版！
部署 KMS 服务器常用的 Microsoft KMS 服务器是开源的 Vlmcsd，它可以部署到不同平台上提供服务。 Vlmcsd 的使用很简单，下载下来启动即可提供服务，默认端口号是 1688
Windows对于 Windows 的下载，可以选择 官方渠道 或通过 MSDN, I tell you 进行下载，安装的专业版均可以 KMS 激活
激活 Windows相对来说激活 Windows 也很简单，以管理员身份打开 Powershell 或命令提示符，并输入命令即可激活
设置 GVLK，这里我们以 Windows Server 2016 标准版为例 1 slmgr /ipk WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY 设置 KMS 服务器 1 slmgr /skms example.]]></description>
</item><item>
    <title>使用 steamcmd 搭建游戏服务器</title>
    <link>https://blog.ginshio.org/2021/steam_apps/</link>
    <pubDate>Mon, 22 Feb 2021 22:23:47 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2021/steam_apps/</guid>
    <description><![CDATA[和好友联机的时候本地服务器实在是不爽，一个人起飞，其他人都是高PING战士，最开始主要是 L4D2 时各种 RPG 服务器有些不爽，为了纯净的服务器只好自己建了
事先声明，我们所有的操作在 Debian / Ubuntu 下操作，有些操作系统可能会不一样，不过大同小异，我们还是定义一些等等可能用到的变量 (主要是路径和密码之类的
1 2 3 4 5 6 7 8 9 10 11 12 13 14 steam=/home/steam group_id=123456789 l4d2=${steam}/l4d2 l4d2_id=222860 l4d2_server_name=&#34;L4D2 Server&#34; l4d2_port=1024 valheim=${steam}/valheim valheim_id=896660 valheim_server_name=&#34;Valheim Server&#34; valheim_world=&#34;World&#34; valheim_port=1024 valheim_passwd=valheim_password dst=${steam}/dst dst_id=343050 SteamCMD顾名思义，steamcmd 是一个命令行工具，同时支持 linux，是我们搭建服务器的好帮手，然而我不会用，不过这不重要，安装跑起来就好
1 2 3 4 add-apt-repository multiverse dpkg --add-architecture i386 apt update &amp;&amp; apt upgrade apt install -y lib32gcc1 steamcmd 我们不仅要安装一个 steamcmd，还要将所有游戏服务器，存放在 ~steam 下，使用 steam 这个用户来运行游戏
1 2 adduser --disabled-login --gecos &#39;Steam&#39; steam sudo -u steam -H ln -s /usr/games/steamcmd ${steam}/steamcmd 语法这里说的语法并不是 SteamCMD 的语法，而是 Steam 中所使用的文本标记语法，这些标记标签允许您为您的留言及发帖文字添加格式，类似于 HTML，官方展示在这里]]></description>
</item><item>
    <title>搭建邮箱服务器</title>
    <link>https://blog.ginshio.org/2020/mail_server/</link>
    <pubDate>Mon, 16 Nov 2020 22:43:53 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2020/mail_server/</guid>
    <description><![CDATA[搭建邮局服务器的想法之前一直都有，不过一直没有尝试，国庆的时候从阿里云换到了腾讯云的时候尝试直接使用 postfix 和 dovecot 搭建，尝试了大概3天被劝退了，重新使用现成的解决方案也算终于搭建好了，可以愉快的使用自建邮箱了 (可以愉快的装逼了
信息 更新了 mailu 的搭建，虽然 mailu 相比 mailcow 可以使用宿主机的数据库，不过 mailu 配置 SMTPS / IMAPS / POP3S 不如 mailcow 简单方便，也没怎么研究，目前没有切换到 mailu 的打算 警告 打算在更换服务器之后不再维护邮箱服务，装逼不存在的 部署开始搭建服务器，以下采用域名 (example.com) 和 IP (1.1.1.1)，安装在 /mailcow，使用主机的nginx反向代理，部署之前我们首先定义一些Shell变量，以便之后使用，请根据自己的需求更改
1 2 3 4 5 6 7 8 9 10 11 12 13 14 path_to=&#34;/path/to&#34; mailcow_path=&#34;${path_to}/mailcow&#34; # mailcow 所在目录 mailu_path=&#34;${path_to}/mailu&#34; mail_host=&#34;mail.example.com&#34; mail_ip=&#34;1.1.1.1&#34; db_user=&#34;example_user&#34; # 数据库用户 (Mailu使用宿主机PostgreSQL时使用) db_passwd=&#34;example_password&#34; # 数据库密码 (Mailu使用宿主机PostgreSQL时使用) db_name=&#34;example_db&#34; # 数据库名称 (Mailu使用宿主机PostgreSQL时使用) http_port=&#34;8080&#34; https_port=&#34;8443&#34; cert_path=&#34;/ssl/path/to/cert/&#34; # 证书存放目录 cert_file=&#34;${cert_path}/cert.]]></description>
</item><item>
    <title>在服务器上部署一些服务</title>
    <link>https://blog.ginshio.org/2020/service/</link>
    <pubDate>Tue, 13 Oct 2020 20:16:45 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2020/service/</guid>
    <description><![CDATA[个人使用的是腾讯云的轻量服务器，系统镜像选择的是 Debian 11，搭建的服务有 博客 HUGO 、私有网盘 Nextcloud 以及 Git服务器 GitLab
目前使用的是 Debian GNU/Linux 11 (bullseye) 搭建服务器，当然用的是 fish 作为 shell
1 2 3 4 5 6 7 8 9 10 11 12 bash -c &#34;cat &lt;&lt;- EOF | sudo tee /etc/apt/sources.list deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free deb https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free deb https://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free deb https://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib non-free # deb-src https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free # deb-src https://mirrors.]]></description>
</item></channel>
</rss>
