<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Network - 标签 - iris</title>
        <link>https://blog.ginshio.org/tags/network/</link>
        <description>Network - 标签 - iris</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ginshio78@gmail.com (GinShio)</managingEditor>
            <webMaster>ginshio78@gmail.com (GinShio)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 26 Feb 2022 14:35:50 &#43;0800</lastBuildDate><atom:link href="https://blog.ginshio.org/tags/network/" rel="self" type="application/rss+xml" /><item>
    <title>I/O 复用</title>
    <link>https://blog.ginshio.org/2022/unixnetworkprogramming_005/</link>
    <pubDate>Sat, 26 Feb 2022 14:35:50 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2022/unixnetworkprogramming_005/</guid>
    <description><![CDATA[<p>在客户端阻塞在 read 等待用户输入时，服务器关闭会导致向客户端发送 FIN，这是客户端的另一个输入。但由于客户端阻塞在 read 从而无法立即接受这个输入，直到从套接字读入为止。这就需要进程提前告知内核，使得内核在进程指定的输入准备好后，或可以输出后，立即通知进程，这个能力被称为 I/O 复用 (I/O multiplexing)。</p>]]></description>
</item><item>
    <title>基本 TCP 编程</title>
    <link>https://blog.ginshio.org/2022/unixnetworkprogramming_004/</link>
    <pubDate>Sat, 19 Feb 2022 15:31:05 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2022/unixnetworkprogramming_004/</guid>
    <description><![CDATA[<h2 id="基本-tcp-套接字函数" class="headerLink">
    <a href="#%e5%9f%ba%e6%9c%ac-tcp-%e5%a5%97%e6%8e%a5%e5%ad%97%e5%87%bd%e6%95%b0" class="header-mark"></a>基本 TCP 套接字函数</h2><figure><img src="/images/unp-socket-functions-for-elementary-tcp-client-and-server.svg" width="40%">
</figure>

<h3 id="socket-函数" class="headerLink">
    <a href="#socket-%e5%87%bd%e6%95%b0" class="header-mark"></a>socket 函数</h3><p>在网络编程中第一步往往调用 socket 函数，以指定通讯协议的详情。</p>
<div class="code-block highlight is-open show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    tw-hidden
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">c</p>]]></description>
</item><item>
    <title>Unix 套接字 API</title>
    <link>https://blog.ginshio.org/2022/unixnetworkprogramming_003/</link>
    <pubDate>Thu, 17 Feb 2022 14:28:37 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2022/unixnetworkprogramming_003/</guid>
    <description><![CDATA[<h2 id="套接字地址数据结构" class="headerLink">
    <a href="#%e5%a5%97%e6%8e%a5%e5%ad%97%e5%9c%b0%e5%9d%80%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84" class="header-mark"></a>套接字地址数据结构</h2><p>套接字函数基本都需要一个指向套接字地址结构的指针作为参数，每个协议族都有自己的套接字定义，均以 <code>sockaddr_</code> 开头，并有协议族的唯一后缀。</p>
<h3 id="ipv4-套接字地址结构" class="headerLink">
    <a href="#ipv4-%e5%a5%97%e6%8e%a5%e5%ad%97%e5%9c%b0%e5%9d%80%e7%bb%93%e6%9e%84" class="header-mark"></a>IPv4 套接字地址结构</h3><p>IPv4 套接字地址结构通常称之为 <strong>互联网套接字结构</strong> (Internet socket address
structure)，结构体 <strong>sockaddr_in</strong>，定义于 <code>&lt;netinet/in.h&gt;</code> 中 (POSIX)。</p>]]></description>
</item><item>
    <title>传输层总述</title>
    <link>https://blog.ginshio.org/2022/unixnetworkprogramming_002/</link>
    <pubDate>Tue, 18 Jan 2022 19:55:40 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2022/unixnetworkprogramming_002/</guid>
    <description><![CDATA[<p>在传输层中，主要学习三种协议</p>
<ul>
<li>User Datagram Protocol (UDP, 用户数据报协议) 是一种简单 (simple)、不可靠
(unreliable) 的数据报协议</li>
<li>Transmission Control Protocol (TCP, 传输控制协议) 是一种复杂的
(sophisticated)、可靠的 (reliable)、字节流协议</li>
<li>Stream Control Transmission Protocol (SCTP, 流控制传输协议) 是一种较新的、可靠的协议，但它还提供消息边界 (message boundaries)、传输层级别的多宿
(multihoming)、最小化头端阻塞 (head-of-line blocking)</li>
</ul>
<h2 id="总图" class="headerLink">
    <a href="#%e6%80%bb%e5%9b%be" class="header-mark"></a>总图</h2><figure><img src="/images/unp-transport-layer-big-picture.svg" width="90%">
</figure>

<p>图中最左边的应用 tcpdump 直接使用数据链路层接口 BPF (BSD packet filter, BSD 分组过滤器) 或 Datalink provider interface (DLPI, 数据链路提供者接口) 进行通信。而其他应用都是用 API 所提供的 socket 或 XTI。当然在 Linux 上提供了 <code>SOCK_PACKET</code> 这种 socket 来访问数据链路。</p>]]></description>
</item><item>
    <title>UNP 简介</title>
    <link>https://blog.ginshio.org/2022/unixnetworkprogramming_001/</link>
    <pubDate>Mon, 17 Jan 2022 13:46:50 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2022/unixnetworkprogramming_001/</guid>
    <description><![CDATA[<div class="details admonition info open">
    <div class="details-summary admonition-title">
        <span class="icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></svg></span>信息<span class="details-icon"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg></span>
    </div>
    <div class="details-content">
        <div class="admonition-content">关于 UNP 的所有代码可以在 <a href="https://github.com/unpbook/unpv13e" target="_blank" rel="noopener noreferrer">https://github.com/unpbook/unpv13e</a> 上找到</div></div></div>
<h2 id="从一个简单的时间获取客户端开始" class="headerLink">
    <a href="#%e4%bb%8e%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84%e6%97%b6%e9%97%b4%e8%8e%b7%e5%8f%96%e5%ae%a2%e6%88%b7%e7%ab%af%e5%bc%80%e5%a7%8b" class="header-mark"></a>从一个简单的时间获取客户端开始</h2><p>接下来，将从一个使用 TCP 连接的获取时间的客户端开始。</p>]]></description>
</item><item>
    <title>初识 Phoenix Framework</title>
    <link>https://blog.ginshio.org/2021/elixir_phoenix_framework_notes_001/</link>
    <pubDate>Tue, 23 Feb 2021 19:52:05 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2021/elixir_phoenix_framework_notes_001/</guid>
    <description><![CDATA[<p>Phoenix Framework 是一个 MVC web 框架，与 Ruby 的 Rails 和 Python 的 Django 类似，是整个 Elixir 社区的核心项目之一，推荐阅读 <a href="https://hexdocs.pm/phoenix/" target="_blank" rel="noopener noreferrer">Phoenix 文档</a></p>
<h2 id="安装" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85" class="header-mark"></a>安装</h2><p>我们使用 Phoenix (<strong>v1.5.7</strong>) 前，需要安装相关依赖与 mix</p>
<ul>
<li><strong>Elixir</strong> (&gt;= v1.6)</li>
<li><strong>Erlang</strong> (&gt;= 20)</li>
<li>node.js [optional] (&gt;= 5.0.0)</li>
<li>Database [default=PostgreSQL]</li>
<li><strong>inotify-tools</strong> [linux]</li>
</ul>
<p>erlang 与 elixir 是运行时环境，数据库方面使用同为社区维护的 Ecto 来操作，Phoenix
使用 node.js 的原因是使用 webpack 编译静态资源，当然你可以只开发 API 不使用静态资源</p>]]></description>
</item></channel>
</rss>
