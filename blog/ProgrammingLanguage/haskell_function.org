#+hugo_categories: ProgrammingLanguage
#+hugo_tags: Note Haskell Guide
#+hugo_draft: true
#+hugo_locale: zh
#+hugo_lastmod: 2020-11-22T14:09:59+08:00
#+hugo_auto_set_lastmod: nil
#+hugo_front_matter_key_replace: author>authors
#+hugo_custom_front_matter: :series ["Haskell Guide"] :series_weight 2
#+title: Haskell 函数
#+author: GinShio
#+date: 2020-11-22T14:09:59+08:00
#+email: ginshio78@gmail.com
#+description: GinShio | Haskell 函数式编程入门 (第二、五、七章读书笔记)
#+keywords: ProgrammingLanguage Note Haskell Guide
#+export_file_name: haskell_function.zh-cn.txt

Haskell 中变量是不可变的, 当你定义一个变量之后, 它的值与类型就被固定了, 如果你重复定义, 那么编译时将会报错。如果你是在GHCi中写代码, GHCi更喜欢使用新定义的变量, 并且不会报出重复定义的错误信息。

* 函数
** 基本格式
在文件中，我们在第一行声明函数的名称、类型，这被称为函数的类型签名，之后另起一行定义函数，大致格式如下
#+begin_src haskell
函数名 :: 参数1类型 -> 参数2类型 -> .. -> 返回值类型
函数名 参数1 参数2 .. = 函数体
#+end_src

如果需要类型限定，使用类型类，需要在类型签名之前进行限定，并使用 $=>$ 将限定与签名链接起来，另外 Haskell 中函数不能以大写字母开始，否则会被当作 =类型= 或 =类型的值= ，如下
#+begin_src haskell
function1 :: (Show a, Ord a) => a -> a -> a
function2 :: Show a => Ord a => a -> a -> a
#+end_src

如果在 GHCi 中定义函数，我们之前也已经接触过了，与 .hs 文件中相当，不过定义多行函数，在 GHCi 中需要使用 =:{= 开头， =:}= 结尾的格式来定义
#+begin_src haskell
:{
week n = case n of
  1 -> "Mon"
  2 -> "Tue"
  3 -> "Wed"
  4 -> "Thu"
  5 -> "Fri"
  6 -> "Sat"
  7 -> "Sun"
  _ -> error "invalid"
:}
:t week -- (Eq a, Num a) => a -> [Char]
week 4 -- "Thu"
#+end_src

** 模块
在编写Haskell代码时，第一行一般会声明一些编译器参数，如果不需要则可以省略这一行，之后使用 =module XXX where= 的格式定义模块的名称，并可以控制对其他模块的可见性。如下定义Test模块，并有三个函数 f1、f2、f3，设置f3为私有:
#+begin_src haskell
module Test (f1, f2) where
f1 = ...
f2 = ...
f3 = ... -- Test模块私有函数
#+end_src

import 可以用来导入需要的库、导入库中特定的函数，或者隐藏一些函数，甚至可以给你导入的模块起一个别名，比如说
#+begin_src haskell
import Test -- 导入模块
import Test (f1) -- 导入Test中的f1
import Test hiding (f1) -- 导入Test模块，但隐藏f1
import Test as T -- 导入Test模块并赋予别名T
#+end_src

如果你并不想导入模块的话，那么你可以在使用时给出完整的路径
#+begin_src haskell
Test.f1 ...
#+end_src


----------


* Lambda
Lambda 表达式是函数的另一种格式，写法源于 $\lambda$ 演算，各个函数式编程中 lambda表达式的写法类似，有如下形式
#+begin_src haskell
(\参数1 -> \参数2 -> ... -> 函数体)
#+end_src

不过在 $\lambda$ 演算中, 我们一般这样写
#+begin_quote
$\lambda$ x. $\lambda$ y. expr
#+end_quote

我们构造一个lambda函数，并应用两个参数 =abs= 与 =(-5)= ，计算过程大致如下
#+begin_src haskell
(\x -> \y -> x y) (abs) (-5)
-- (\y -> abs y) (-5)
-- abs (-5)
-- 5
#+end_src

lambda表达式一般有两个主要应用:
  1. 构造一个 *匿名函数* (anonymous function)
  2. 对于柯里化函数，在不给定前一个参数的前提下给定后一个

#+begin_src haskell
map (\x -> x * 2 + 7) [1..10]
-- [9,11,13,15,17,19,21,23,25,27]
#+end_src

关于 lambda 演算的相关内容推荐阅读 [[https://cgnail.github.io/tags/#lambda%E6%BC%94%E7%AE%97][Lambda演算系列翻译]]

** 标识符
lambda演算在求值时不能引用任何没有被绑定的标识符，如果一个标识符是闭合lambda表达式的参数，那么我们称这个标识符是被绑定的；如果标识符在上下文中都没有被绑定，那么称它为 =自由变量=
#+begin_src haskell
(\x -> plus x y) -- x 是绑定的，plus 和 y 是自由变量
(\y -> (\x -> plus x y))
-- 对于内层lambda来说y是自由变量，对于整体来说x/y都是绑定的，plus是自由变量
#+end_src

lambda演算只有所有变量都是绑定的才完全合法，但是我们脱离上下文描述一个复杂表达式时，自由变量是允许存在的，我们一般将自由变量写作 =(free e)=

** 运算法则
*** Alpha 替换
Alpha是一个重命名操作，即变量的名称是不重要的，我们可以修改lambda演算中的参数名称，只要我们同时修改函数体内所有对它的自由引用即可，但是变量名不能有冲突。

例如，我们将上面一个表达式进行Alpha替换，将x变为y，写作 =alpha[x/y]= ，则得到下面的表达式
#+begin_quote
(\x -> if x == 0 then 1 else x ^ 2)

(\y -> if y == 0 then 1 else y ^ 2)
#+end_quote

*** Beta 归约
Beta可以让lambda演算执行任何可以由机器来完成的计算，如果你有一个函数应用，你可以对这个函数体中和对应函数标识符相关部分做替换，替换方法是把标识符用参数值替换。

同理，我们对上面一个表达式做Beta归约，用标识符q替换所有的引用参数y，则得到下面的表达式
#+begin_quote
(\y -> (\x -> x + y)) q

(\x -> x + q)
#+end_quote

Beta规则的形式化写法为:
#+begin_quote
(\x -> B e = B[x := e] if (free e) subset (free B[x := e]))
#+end_quote

我们只有在不引起标识符冲突的情况下，才可以进行Beta归约，如果冲突我们首先需要 Alpha 替换解决冲突。


----------


* 高阶函数
以其他函数为参数的函数，或者以函数作为结果返回的函数称为高阶函数。由于以函数作为返回结果只是柯里化函数的特点而已，所以高阶函数常常仅特指那些以函数为参数的函数。

** 复合函数
数学中常用复合函数运算将两个函数符合在一起，如 $f(x)=4x+1$ 和 $g(x)=x^{2}+1$ 复合得 $h(x)=f(g(x))$ ，即 $h(x)=4g(x)+1=4(x^{2}+1)+1$ ，也就是先求得g再传递给f，Haskell中可以定义为
#+begin_src haskell
f x = 4 * x + 1
g x = x ^ 2 + 1
h x = f $ g x -- 或 h x = f (g x)
#+end_src

Haskell 中提供了复合函数运算符 =(.)= 来符合两个函数，可以直接写作 =h = f.g= ，数学写作 $f \circ g$
#+begin_src haskell
:t (.) -- (b -> c) -> (a -> b) -> a -> c
h = f.g
:t h -- Num c => c -> c
#+end_src


----------


* 递归函数
Haskell 中没有其他语言中的 while 或 for 这种循环结构，函数在自己调用自己，直到一种特殊的情况下，递归才会停止，利用递归来完成循环结构。

递归函数可以定义为两部分 *基本条件* (base case) 与 *递归步骤* (recursive step)，递归函数会从给定的参数开始，重复递归步骤，期间参数不断发生变化，向基本条件靠拢，知道满足基本条件才停止递归。如果递归函数无法停下来，最终会导致 *栈溢出* (stack overflow)。
#+begin_src haskell
-- 求幂
:{
my_power :: Int -> Int -> Int
my_power _ 0 = 1
my_power x n
    | n < 0 = error "n must be greater than or equal to 0"
    | odd n = let p = my_power x ((n - 1) `div` 2) in x * p * p
    | otherwise = let p = my_power x (n `div` 2) in p * p
:}
-- 将元素加入到列表的最后
:{
snoc :: a -> [a] -> [a]
snoc x [] = [x]
snoc x (y:l) = y:(snoc x l)
:}
#+end_src

** 扩展递归与尾递归
观察下面两个函数，可以发现，虽然都是递归实现，但是还是有些许不同
#+begin_src haskell
-- 阶乘
:{
factorial :: Int -> Int
factorial n = if n == 0 then 1 else n * factorial (n - 1)
:}
-- 最大公约数
:{
my_gcd :: Int -> Int -> Int
my_gcd x y = if y == 0 then x else my_gcd y (mod x y)
:}
#+end_src

阶乘函数在未到达递归的基本条件前是 *一直在展开* ，并没有进行任何计算，所有的中间结果会被临时存储在栈中，这样的递归被称为 =扩展递归= (augmenting recursion)。最大公约数函数的递归调用不需要在其递归过程中将中间结果临时存储在栈中，计算过程中可以不必展开，这种递归被称为 =尾递归= (tail recursion)。尾递归是一种特殊的递归函数。

** 互相递归
互相递归 (mutual recursion) 是递归的一种特殊情形，两个函数的定义都用到了对方。
#+begin_src haskell
:{
my_even :: Int -> Bool
my_odd :: Int -> Bool
my_even 0 = True
my_even n = my_odd (n - 1)
my_odd 0 = False
my_odd n = my_even (n - 1)
:}
#+end_src

** 多分支递归
如果你已经学习了快速排序与归并排序，那么试试使用 Haskell 完成它们吧
#+begin_src haskell
-- 快速排序
:{
__filter :: (a -> Bool) -> [a] -> ([a], [a])
__filter _ [] = ([], [])
__filter f (x:l) | f x = ((x:true_l), false_l)
                 | otherwise = (true_l, (x:false_l))
    where (true_l, false_l) = __filter f l
quick_sort :: Ord a => [a] -> [a]
quick_sort [] = []
quick_sort [x] = [x]
quick_sort (x:l) = (quick_sort a) ++ [x] ++ (quick_sort b)
    where (a, b) = __filter (<x) l
:}
-- 归并排序
:{
__merge :: Ord a => [a] -> [a] -> [a]
__merge l [] = l
__merge [] l = l
__merge (x:xl) (y:yl) | x > y = y:(__merge (x:xl) yl)
                      | otherwise = x:(__merge xl (y:yl))
merge_sort :: Ord a => [a] -> [a]
merge_sort [] = []
merge_sort [x] = [x]
merge_sort l = __merge (merge_sort l1) (merge_sort l2) where
    len = (length l) `div` 2
    (l1, l2) = (take len l, drop len l)
:}
#+end_src

我们可以发现，上述函数定义中，递归调用有多个分支，这种结构被称作 *多分支递归* (multi-branched recursion)，SICP 中称其为树形递归。

** 递归与Y
{{< admonition >}}
Y是lambda演算中的重要概念，介于笔者水平有限，推荐阅读 *为什么是Y?* 这篇博客 ([[http://goodmath.blogspot.com/2006/05/why-oh-why-y.html][原文]] / [[http://cgnail.github.io/academic/lambda-4/][译文]])，如果希望有更深入的了解请学习 *lambda 演算* 与 *System F*
{{< /admonition >}}

函数式编程以 lambda 演算为基础，但是在 lambda 演算中定义的函数并不能像 Haskell 中那样简单地通过调用自身来定义递归函数。如果我们希望递归一个 lambda 那我们需要引入一些特殊的东西，即 *组合子* ，组合子是一种特殊的高阶函数，它们只引用函数应用，而Y组合子可以使lambda进行递归

#+begin_src haskell
let Y = (\y -> (\x -> y (x x)) (\x -> y (x x)))
#+end_src

我们可以试着推导Y组合子是怎么递归的，从 =(Y Y)= 开始吧
  1. 展开第一个Y， =(\y -> (\x -> y (x x)) (\x -> y (x x))) Y=
  2. Beta[y:=Y]， =(\x -> Y (x x)) (\x -> Y (x x))=
  3. Alpha[x/z]应用于第二个lambda， =(\x -> Y (x x)) (\z -> Y (z z))=
  4. Beta[x:=(\z -> Y (z z))]， =Y ((\z -> Y (z z)) (\z -> Y (z z)))=
  5. Alpha[z/a]应用于第二个lambda并 Beta[z:=(\a -> Y (a a))]， =Y (Y ((\a -> Y (a a)) (\a -> Y (a a))))=
  6. ...

现在，仔细看看这个推导，我们可以发现 =(Y Y) = Y(Y Y) = Y(Y(Y...))= ，它在不断创造它自身，Y组合子是惰性求值，如果我们用急切求值，那么上述Y组合子是导不出来的，事实上它会永远地复制Y。

我们为了让lambda递归，可以设计一个函数 G 接受并返回这个lambda，即 $G(\lambda)=\lambda$ ，满足 *f(x)=x* 的x称之为函数f的 *不动点* ，函数f称为 *恒等函数* ，Y组合子的作用就是计算函数的不动点，对于所有函数f都满足 =Y(f) = f(Y(f))=
  1. 展开Y， =(\y -> (\x -> y (x x)) (\x -> y (x x))) f=
  2. Beta[y:=f]， =(\x -> f (x x)) (\x -> f (x x))=
  3. Alpha[x/a]应用于第二个lambda，并 Beta[x:=(\x -> f (x x))] 应用于第一个lambda， =f ((\a -> f (a a)) (\a -> f (a a)))=
  4. Alpha[a/x]， =f ((\x -> f (x x)) (\x -> f (x x)))=
  5. 与第二步等价替换， =f (Y f)=

那我们现在试着将Y引入一个实际问题呢，比如阶乘，我们以 meta 代指 lambda，就不再写
一大堆lambda了，其中 meta 就是我们要找的函数G

#+begin_src haskell
let meta = (\f -> \n -> if n == 0 then 1 else n * (f (n - 1)))
let factorial n = (Y meta) n
#+end_src
