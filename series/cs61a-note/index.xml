<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CS61A Note - 系列 - iris</title>
        <link>https://blog.ginshio.org/series/cs61a-note/</link>
        <description>CS61A Note - 系列 - iris</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>ginshio78@gmail.com (GinShio)</managingEditor>
            <webMaster>ginshio78@gmail.com (GinShio)</webMaster><lastBuildDate>Sun, 12 Feb 2023 14:41:28 &#43;0800</lastBuildDate><atom:link href="https://blog.ginshio.org/series/cs61a-note/" rel="self" type="application/rss+xml" /><item>
    <title>CS61A 入门</title>
    <link>https://blog.ginshio.org/2022/cs61a_01_getting_started/</link>
    <pubDate>Sun, 18 Sep 2022 22:03:30 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2022/cs61a_01_getting_started/</guid>
    <description><![CDATA[<p>虽然 CS61A 使用 Python 进行教学，但我希望好好学一下 Erlang 和 Scheme。如果想查看更多关于 CS61A 的信息，请访问 <a href="https://cs61a.org/" target="_blank" rel="noopener noreferrer">课程主页</a>，当然我也会将一部分内容和实现放在自己的
<a href="https://gitlab.com/GinShio/sicp-learn.git" target="_blank" rel="noopener noreferrer">repo</a> 中。</p>
<p>scheme 有很多不同的实现，而大多实现不兼容。因此我使用的是 <a href="https://www.gnu.org/software/mit-scheme/" target="_blank" rel="noopener noreferrer">MIT/GNU Scheme</a>。</p>
<h2 id="lab00-getting-startted--入门" class="headerLink">
    <a href="#lab00-getting-startted--%e5%85%a5%e9%97%a8" class="header-mark"></a>Lab00: Getting Startted (入门)</h2><p>首先搭建一个环境，CS61A 中指 Python3 环境。</p>
<ul>
<li>Setup: 以下是本课程所用到的基础软件，也是重要的组件。
<ul>
<li>终端 (Terminal)：安装一个终端可以让你运行本课程的 OK 命令</li>
<li>编程环境 (Environment)：编程环境是必须的，当然课程需要的是 Python3.7，这样你才可以运行 OK 命令</li>
<li>文本编辑器 (Text Editor)：VSCode、Atom 什么都行，只要能用来写代码</li>
</ul>
</li>
<li>练习使用终端，并组织你的项目文件</li>
<li>学习 Python 基础</li>
<li>做一个练习</li>
</ul>
<h3 id="安装" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85" class="header-mark"></a>安装</h3><h4 id="安装终端" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e7%bb%88%e7%ab%af" class="header-mark"></a>安装终端</h4><p>在 MacOS 和 Linux 中本身就自带了终端软件 (Terminal)，如果是 KDE，终端软件被称作
Konsole。而 Windows 中，直接在 Store 中下载 Windows Terminal 即可。当然 Windows
下推荐使用 WSL，但是系统不是关注的重点。</p>
<h4 id="安装语言环境" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e8%af%ad%e8%a8%80%e7%8e%af%e5%a2%83" class="header-mark"></a>安装语言环境</h4><p>最低要求 Python3.7，因为这是运行 OK 命令的必要条件。当然你也可以使用别的编程语言。</p>
<p>Windows 下，你可以在这里下载 <a href="https://www.python.org/" target="_blank" rel="noopener noreferrer">Python3</a> 或 <a href="https://www.erlang.org/" target="_blank" rel="noopener noreferrer">erlang</a>。安装之后将路径添加到 PATH 系统环境变量中。如果你用 WSL 那和 Linux 下没什么区别。</p>]]></description>
</item><item>
    <title>控制流、递归、高阶函数</title>
    <link>https://blog.ginshio.org/2022/cs61a_02_control_and_higher_order_functions/</link>
    <pubDate>Sun, 25 Sep 2022 14:26:28 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2022/cs61a_02_control_and_higher_order_functions/</guid>
    <description><![CDATA[<h2 id="控制流" class="headerLink">
    <a href="#%e6%8e%a7%e5%88%b6%e6%b5%81" class="header-mark"></a>控制流</h2><p>解释器所执行语句来执行某些操作。</p>
<figure>
</figure>

<p>比如这整个复合语句 (compound statement)，在 Python 中由 <code>def</code> 声明；标头 <code>header</code> 确定了一个简易语句 (clause) 的类型，这个语句中跟随了一个语句序列 (suite)。解释器会按一定顺序执行这个语句序列。</p>
<h3 id="条件语句" class="headerLink">
    <a href="#%e6%9d%a1%e4%bb%b6%e8%af%ad%e5%8f%a5" class="header-mark"></a>条件语句</h3><p>条件语句在大部分语言中以 <code>if</code> 关键字呈现。</p>
<p>在 Python 中 <code>True</code> 和 <code>False</code> 分别表示真或假，if 引导条件语句及其真分支，零或一个
else 引导假分支，其中还可能会有零或多个 elif 进行嵌套。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">absolute_value</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="n">n</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 scheme 中 <code>#t</code> 和 <code>#f</code> 分别表示真或假，语法的话就不能 elif 进行嵌套了 <code>(if test consequent alternative)</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scheme" data-lang="scheme"><span class="line"><span class="cl"><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">absolute-value</span> <span class="nv">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">positive? </span><span class="nv">n</span><span class="p">)</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>FP 中一般都会提供一套类似 guard 的语法，即该条件语句可以接受任意多的条件判断，由上至下进行条件判断，在条件为真时执行语句块并退出条件语句，如果所有条件都不符合将有一个默认块进行兜底处理。其实这个语句更像是 <code>if-then-elif-else</code> 的变体。</p>]]></description>
</item><item>
    <title>数据抽象</title>
    <link>https://blog.ginshio.org/2023/cs61a_03_data_abstractions/</link>
    <pubDate>Sun, 12 Feb 2023 14:41:28 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2023/cs61a_03_data_abstractions/</guid>
    <description><![CDATA[<h2 id="容器" class="headerLink">
    <a href="#%e5%ae%b9%e5%99%a8" class="header-mark"></a>容器</h2><h3 id="lists" class="headerLink">
    <a href="#lists" class="header-mark"></a>Lists</h3><p>在 scheme 中一类最基础的异构数据结构即 <strong>list</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scheme" data-lang="scheme"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="s">&#34;str&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="s">&#34;str&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当然 list 可以看作是个二元组 <strong>pair</strong>，也有称作 dotlist</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scheme" data-lang="scheme"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>            <span class="c1">;; &#39;(1 . 2)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>         <span class="c1">;; &#39;(1 2)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">cons*</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span>       <span class="c1">;; &#39;(1 2 3 . 4)  &#39;(1 . (2 . (3 . 4)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">cons*</span> <span class="mi">1</span> <span class="mi">2</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span> <span class="mi">4</span><span class="p">))</span>    <span class="c1">;; &#39;(1 2 3 4)</span>
</span></span><span class="line"><span class="cl"><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="o">.</span> <span class="p">())</span>             <span class="c1">;; &#39;(1)</span>
</span></span><span class="line"><span class="cl"><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="o">.</span> <span class="p">(</span><span class="mi">2</span> <span class="o">.</span> <span class="p">(</span><span class="mi">3</span> <span class="o">.</span> <span class="p">())))</span> <span class="c1">;; &#39;(1 2 3)</span>
</span></span><span class="line"><span class="cl"><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="o">.</span> <span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>          <span class="c1">;; &#39;(1 2 3)</span>
</span></span><span class="line"><span class="cl"><span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="mi">3</span> <span class="mi">4</span><span class="p">))</span>      <span class="c1">;; &#39;((1 2) 3 4)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>访问 list 的首个元素使用 <strong>car</strong>，而获取尾元素使用 <strong>cdr</strong></p>]]></description>
</item></channel>
</rss>
