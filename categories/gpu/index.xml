<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>GPU - 分类 - iris</title>
        <link>https://blog.ginshio.org/categories/gpu/</link>
        <description>GPU - 分类 - iris</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ginshio78@gmail.com (GinShio)</managingEditor>
            <webMaster>ginshio78@gmail.com (GinShio)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 15 Nov 2024 22:20:00 &#43;0800</lastBuildDate><atom:link href="https://blog.ginshio.org/categories/gpu/" rel="self" type="application/rss+xml" /><item>
    <title>GPU 基础介绍</title>
    <link>https://blog.ginshio.org/2024/gpu-introduce/</link>
    <pubDate>Fri, 15 Nov 2024 22:20:00 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2024/gpu-introduce/</guid>
    <description><![CDATA[<p>该篇介绍主要以 AMDGPU 7900XTX (Navi31) 为例。</p>
<h2 id="gpgpu-模型简介" class="headerLink">
    <a href="#gpgpu-%e6%a8%a1%e5%9e%8b%e7%ae%80%e4%bb%8b" class="header-mark"></a>GPGPU 模型简介</h2><figure><img src="/images/AMDGPU_RDNA3_HW_BlockDiagram.png">
</figure>

<h3 id="simt-模型" class="headerLink">
    <a href="#simt-%e6%a8%a1%e5%9e%8b" class="header-mark"></a>SIMT 模型</h3><p>现代 GPU 上基本使用 <strong>SIMT</strong> (单指令多线程, Single Instruction Multiple Threads) 模型，即一条指令执行在多个线程 (thread / lane / invocation) 上，每个线程上可能存储、运算不同地数据，也就是说具有大规模<strong>并行</strong>计算的能力。</p>]]></description>
</item><item>
    <title>How To Use Mesa&#39;s test tool: deqp-runner</title>
    <link>https://blog.ginshio.org/2024/how-to-use-deqp-runner/</link>
    <pubDate>Fri, 20 Sep 2024 23:13:27 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2024/how-to-use-deqp-runner/</guid>
    <description><![CDATA[<p><a href="https://gitlab.freedesktop.org/mesa/deqp-runner" target="_blank" rel="noopener noreferrer">deqp-runner</a> is a series of tools written by mesa developers for running vulkan
and opengl quality test case programs. It can run in parallel and robustly <a href="https://github.com/KhronosGroup/VK-GL-CTS" target="_blank" rel="noopener noreferrer">dEQP</a>
(draw-element quality program), <a href="https://gitlab.freedesktop.org/mesa/piglit" target="_blank" rel="noopener noreferrer">piglit</a>, SkQP (Skia Quality Program), and so on.</p>
<p>In my experience, when running large dEQP test cases, your own changes may cause
umd (user mode driver) to <em>fail</em>, <em>crash</em>, <em>timeout</em>, or <em>hang</em>. If you simply use
<code>deqp-vk</code>, the khronos testcases program for vulkan, the test will stop when umd
throws unrecoverable error. And we cannot easily get the results that new
failures based on the previous version.</p>]]></description>
</item><item>
    <title>How To Build Mesa for AMD</title>
    <link>https://blog.ginshio.org/2023/how-to-build-mesa/</link>
    <pubDate>Mon, 28 Aug 2023 22:25:22 &#43;0800</pubDate><author>
                    <name>GinShio</name>
                </author><guid>https://blog.ginshio.org/2023/how-to-build-mesa/</guid>
    <description><![CDATA[<h2 id="what" class="headerLink">
    <a href="#what" class="header-mark"></a>What</h2><p>copy from <a href="https://en.wikipedia.org/wiki/Mesa_%28computer_graphics%29" target="_blank" rel="noopener noreferrer">Wikipidia</a>:</p>
<p>Mesa is an open source implementation of OpenGL, Vulkan, and other graphics API
specifications. Mesa translates these specifications to vendor-specific graphics
hardware drivers.</p>
<h3 id="vendor-drivers" class="headerLink">
    <a href="#vendor-drivers" class="header-mark"></a>Vendor Drivers</h3><p>Mesa is UMD (User mode driver), provides implementation of graphics API and
shader compiler. Mesa is like a mono repository, different vendor drivers and
graphics APIs are in different directories.</p>
<p><strong>Gallium</strong> is a driver project in mesa, includes many backends for hardwares:</p>
<ul>
<li>AMD driver for GCN &amp; Navi (<em>radeonsi</em>)</li>
<li>Intel driver for iris (<em>i965</em>)</li>
<li>Intel driver (<em>i915</em>)</li>
<li>Nvidia driver (<em>nouveau</em>)</li>
<li>Software implementation (<em>swrast</em>)</li>
<li>OpenGL over Vulkan (<em>zink</em>)</li>
<li>DirectX3D 12 driver (<em>d3d12</em>)</li>
<li>OpenCL frontend (<em>clover</em>)</li>
<li>new OpenCL frontend by rust (<em>rusticl</em>, 23.1)</li>
</ul>
<p>libgl only provides APIs, and dispatch call to vendor implementation (e.g.
radeonsi).</p>]]></description>
</item></channel>
</rss>
