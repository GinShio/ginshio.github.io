<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Applications - 分类 - iris</title>
        <link>https://blog.ginshio.org/categories/applications/</link>
        <description>Applications - 分类 - iris</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>ginshio78@gmail.com (GinShio)</managingEditor>
            <webMaster>ginshio78@gmail.com (GinShio)</webMaster><lastBuildDate>Sat, 27 Aug 2022 14:03:31 &#43;0800</lastBuildDate><atom:link href="https://blog.ginshio.org/categories/applications/" rel="self" type="application/rss+xml" /><item>
    <title>在 Windows 的 Git Bash 中使用包管理器</title>
    <link>https://blog.ginshio.org/2022/git_bash_with_pacman_on_windows/</link>
    <pubDate>Sat, 27 Aug 2022 14:03:31 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2022/git_bash_with_pacman_on_windows/</guid>
    <description><![CDATA[<p>Windows 中，在安装 Git Bash 时，会安装一个最小化的 Msys 环境，用于提供 Uinx 兼容层。单独安装一个 msys 不如直接使用 Git 引入的来的爽。</p>
<p>另外还有些好处，比如安装依赖只需要从包管理器安装，而无需到处找官网安装配环境。</p>
<h2 id="安装-git" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-git" class="header-mark"></a>安装 Git</h2><p>Git 的安装应该是都会的，但还是应该说以下，在 Windows 上安装 git 时，实际上是有很多细节需要注意的。</p>
<ol>
<li>
<p>选择 git 使用的默认的编辑器</p>
<figure>
    </figure>

<p>实际上，git 已经在这里说的很明白了，默认 vim 是一个历史原因，推建我们使用更现代的 GUI 编辑器。实际上，你可以使用 <code>core.editor</code> 来修改你想使用的编辑器。当然，如果你不设置这个值，git 会用环境变量中的 <code>EDITOR</code> 作为默认编辑器使用，而
Unix 世界中，<code>EDITOR</code> 往往是 <code>Vi</code> 或 <code>Vim</code>。</p>
<p>最后说一下我的习惯，我并不喜欢 Vim，但是配置了的 Emacs 打开太慢了，由其是简单的写一个 message (VSCode 人称小 emacs)，所以我更偏向于终端编辑器 GNU Nano，图形编辑器则更喜欢用 Kate。</p>
</li>
<li>
<p>初始化新仓库时的默认分值名称</p>
<figure>
    </figure>

<p>你可以使用 <code>init.defaultbranch</code> 来更改默认的分支名称。</p>
</li>
<li>
<p>环境变量的作用域</p>
<figure>
    </figure>

<p>我更推建第一种使用方式，我们只会在 Git-Bash 中使用 Unix tools。这样现得我们的环境变量更为干净。其实在 Powershell 中还好，在 CMD Prompt 中使用 <code>[</code> 也太精分了。</p>]]></description>
</item><item>
    <title>openSUSE 下 HP 打印机配置</title>
    <link>https://blog.ginshio.org/2022/hp_printer_driver/</link>
    <pubDate>Sun, 27 Feb 2022 18:49:18 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2022/hp_printer_driver/</guid>
    <description><![CDATA[<p>正好家里买了打印机，HP 4800 系列，耗材是真便宜，喷墨是真慢啊。不过正好记录一下
Linux 下的 HP 打印机配置过程。</p>
<p>另外 HP 对开源的态度真不错，估计也是因为自家是开源大厂的缘故吧。</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>信息<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本文主要是 openSUSE 配置 HP 打印机的过程</div>
        </div>
    </div>
<h2 id="安装驱动" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e9%a9%b1%e5%8a%a8" class="header-mark"></a>安装驱动</h2><p>Linux 下有 HP 官方的打印机驱动，称为 HPLIP (HP&rsquo;s Linux Imaging and Printing
software)，可以查看 <a href="https://developers.hp.com/hp-linux-imaging-and-printing/features" target="_blank" rel="noopener noreferrer">HPLIP 文档</a> 或者 <a href="https://developers.hp.com/hp-linux-imaging-and-printing/gethplip" target="_blank" rel="noopener noreferrer">下载</a>。</p>
<p>对于 HPLIP 可以在以下 Linux 发行版进行自动安装</p>
<ul>
<li>SUSE Linux (13.2, 42.1, 42.2, 42.3, 15.0, 15.1, 15.2, 15.3)</li>
<li>Fedora (22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35)</li>
<li>Linux Mint (18, 18.1, 18.2, 18.3, 19, 19.1, 19.2, 19.3, 20.04, 20.1, 20.2, 20.3)</li>
<li>Red Hat Enterprise Linux (6.0, 7.0, 7.2, 7.6, 7.7, 7.8, 7.9, 8.0, 8.2, 8.3, 8.4, 8.5)</li>
<li>Boss (5.0)</li>
<li>Ubuntu (12.04, 14.04, 15.10, 16.xx, 17.xx, 18.xx, 19.xx, 20.xx, 21.xx)</li>
<li>Debian (7.0 ~ 7.9, 8.0 ~ 8.8, 9.1 ~ 9.9, 10.0 ~ 10.9, 11)</li>
<li>Manjaro Linux (17.1.4, 18.0, 18.0.4, 18.1.0, 18.1.2, 19.0, 20.0, 20.2, 21.0.7)</li>
<li>Zorin (15, 16)</li>
<li>MX Linux (21)</li>
<li>Elementary OS (6, 6.1)</li>
</ul>
<p>比如说 FreeBSD、Gentoo 等发行版，可以采用手动安装。</p>]]></description>
</item><item>
    <title>使用 KMS 激活 Microsoft 软件</title>
    <link>https://blog.ginshio.org/2021/kms/</link>
    <pubDate>Sun, 09 May 2021 18:28:44 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2021/kms/</guid>
    <description><![CDATA[<p>微软的软件主要可以通过以下三个渠道获取:</p>
<ul>
<li>零售</li>
<li>原始设备制造商 (OEM)</li>
<li>批量许可协议</li>
</ul>
<p>OEM 在工厂执行激活，比如说新买的笔记本电脑自带的系统就是这种方式。零售主要通过联机、电话或 VAMT 代理激活。批量激活产品主要选择 MAK (多次激活密钥) 、 KMS (密钥管理服务) 以及 AD (Active Directory) 进行激活。</p>
<p>KMS 可以在本地网络完成激活，而无需将个别计算机连接到 Microsoft 进行产品激活。KMS
不需要专用系统的轻型服务，可以轻易地将其联合托管在提供其他服务的系统上。</p>
<p>KMS 服务器可以为局域网内所有连接的产品进行周期性激活，激活周期一般为 180 天，产品激活后会定期连接 KMS 服务器进行验证、续期，如果不能连接到服务器在激活周期过后，产品将过期而需要重新激活。</p>
<p>KMS 服务激活的是 VL 版，而我们常用的 RTL (零售版) 是无法激活的。自己搭建 KMS 服务器激活产品，虽然可以正常使用，但是不能算正版软件，请支持正版！</p>
<h2 id="部署-kms-服务器" class="headerLink">
    <a href="#%e9%83%a8%e7%bd%b2-kms-%e6%9c%8d%e5%8a%a1%e5%99%a8" class="header-mark"></a>部署 KMS 服务器</h2><p>常用的 Microsoft KMS 服务器是开源的 <a href="https://github.com/Wind4/vlmcsd" target="_blank" rel="noopener noreferrer">Vlmcsd</a>，它可以部署到不同平台上提供服务。
Vlmcsd 的使用很简单，下载下来启动即可提供服务，默认端口号是 1688</p>
<h2 id="windows" class="headerLink">
    <a href="#windows" class="header-mark"></a>Windows</h2><p>对于 Windows 的下载，可以选择 <a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO" target="_blank" rel="noopener noreferrer">官方渠道</a> 或通过 <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener noreferrer">MSDN, I tell you</a> 进行下载，安装的专业版均可以 KMS 激活</p>
<h3 id="激活-windows" class="headerLink">
    <a href="#%e6%bf%80%e6%b4%bb-windows" class="header-mark"></a>激活 Windows</h3><p>相对来说激活 Windows 也很简单，以<strong>管理员身份</strong>打开 Powershell 或命令提示符，并输入命令即可激活</p>
<ol>
<li>设置 GVLK，这里我们以 Windows Server 2016 标准版为例
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">slmgr /ipk WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>设置 KMS 服务器
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">slmgr /skms example.com
</span></span></code></pre></td></tr></table>
</div>
</div>如果 KMS 服务端口号不是 1688 需要显示指定端口号，比如端口号是 1024
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">slmgr /skms example.com:1024
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>激活 Windows
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">slmgr /ato
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>这是一个可选项，查看激活情况
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">slmgr /xpr
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="windows-gvlk" class="headerLink">
    <a href="#windows-gvlk" class="header-mark"></a>Windows GVLK</h3><p>在此列出各个版本对应的 GVLK，所有的 Key 也可以前往 <a href="https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys" target="_blank" rel="noopener noreferrer">官方文档</a> 查看</p>]]></description>
</item><item>
    <title>使用 steamcmd 搭建游戏服务器</title>
    <link>https://blog.ginshio.org/2021/steam_apps/</link>
    <pubDate>Mon, 22 Feb 2021 22:23:47 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2021/steam_apps/</guid>
    <description><![CDATA[<p>和好友联机的时候本地服务器实在是不爽，一个人起飞，其他人都是<strong>高PING战士</strong>，最开始主要是 L4D2 时各种 RPG 服务器有些不爽，为了纯净的服务器只好自己建了</p>
<p>事先声明，我们所有的操作在 Debian / Ubuntu 下操作，有些操作系统可能会不一样，不过大同小异，我们还是定义一些等等可能用到的变量 (主要是路径和密码之类的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">steam</span><span class="o">=</span>/home/steam
</span></span><span class="line"><span class="cl"><span class="nv">group_id</span><span class="o">=</span><span class="m">123456789</span>
</span></span><span class="line"><span class="cl"><span class="nv">l4d2</span><span class="o">=</span><span class="si">${</span><span class="nv">steam</span><span class="si">}</span>/l4d2
</span></span><span class="line"><span class="cl"><span class="nv">l4d2_id</span><span class="o">=</span><span class="m">222860</span>
</span></span><span class="line"><span class="cl"><span class="nv">l4d2_server_name</span><span class="o">=</span><span class="s2">&#34;L4D2 Server&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">l4d2_port</span><span class="o">=</span><span class="m">1024</span>
</span></span><span class="line"><span class="cl"><span class="nv">valheim</span><span class="o">=</span><span class="si">${</span><span class="nv">steam</span><span class="si">}</span>/valheim
</span></span><span class="line"><span class="cl"><span class="nv">valheim_id</span><span class="o">=</span><span class="m">896660</span>
</span></span><span class="line"><span class="cl"><span class="nv">valheim_server_name</span><span class="o">=</span><span class="s2">&#34;Valheim Server&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">valheim_world</span><span class="o">=</span><span class="s2">&#34;World&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">valheim_port</span><span class="o">=</span><span class="m">1024</span>
</span></span><span class="line"><span class="cl"><span class="nv">valheim_passwd</span><span class="o">=</span>valheim_password
</span></span><span class="line"><span class="cl"><span class="nv">dst</span><span class="o">=</span><span class="si">${</span><span class="nv">steam</span><span class="si">}</span>/dst
</span></span><span class="line"><span class="cl"><span class="nv">dst_id</span><span class="o">=</span><span class="m">343050</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="steamcmd" class="headerLink">
    <a href="#steamcmd" class="header-mark"></a>SteamCMD</h2><p>顾名思义，steamcmd 是一个命令行工具，同时支持 linux，是我们搭建服务器的好帮手，然而我不会用，不过这不重要，安装跑起来就好</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">add-apt-repository multiverse
</span></span><span class="line"><span class="cl">dpkg --add-architecture i386
</span></span><span class="line"><span class="cl">apt update <span class="o">&amp;&amp;</span> apt upgrade
</span></span><span class="line"><span class="cl">apt install -y lib32gcc1 steamcmd
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们不仅要安装一个 steamcmd，还要将所有游戏服务器，存放在 <code>~steam</code> 下，使用
steam 这个用户来运行游戏</p>]]></description>
</item><item>
    <title>搭建邮箱服务器</title>
    <link>https://blog.ginshio.org/2020/mail_server/</link>
    <pubDate>Mon, 16 Nov 2020 22:43:53 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2020/mail_server/</guid>
    <description><![CDATA[<p>搭建邮局服务器的想法之前一直都有，不过一直没有尝试，国庆的时候从阿里云换到了腾讯云的时候尝试直接使用 <code>postfix</code> 和 <code>dovecot</code> 搭建，尝试了大概3天被劝退了，重新使用现成的解决方案也算终于搭建好了，可以愉快的使用自建邮箱了 (<del>可以愉快的装逼了</del></p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>信息<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">更新了 mailu 的搭建，虽然 mailu 相比 mailcow 可以使用宿主机的数据库，不过 mailu
配置 SMTPS / IMAPS / POP3S 不如 mailcow 简单方便，也没怎么研究，目前没有切换到
mailu 的打算</div>
        </div>
    </div>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>警告<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">打算在更换服务器之后不再维护邮箱服务，装逼不存在的</div>
        </div>
    </div>
<h2 id="部署" class="headerLink">
    <a href="#%e9%83%a8%e7%bd%b2" class="header-mark"></a>部署</h2><p>开始搭建服务器，以下采用域名 (<code>example.com</code>) 和 IP (<code>1.1.1.1</code>)，安装在
<code>/mailcow</code>，使用主机的nginx反向代理，部署之前我们首先定义一些Shell变量，以便之后使用，请根据自己的需求更改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">path_to</span><span class="o">=</span><span class="s2">&#34;/path/to&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">mailcow_path</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">path_to</span><span class="si">}</span><span class="s2">/mailcow&#34;</span> <span class="c1"># mailcow 所在目录</span>
</span></span><span class="line"><span class="cl"><span class="nv">mailu_path</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">path_to</span><span class="si">}</span><span class="s2">/mailu&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">mail_host</span><span class="o">=</span><span class="s2">&#34;mail.example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">mail_ip</span><span class="o">=</span><span class="s2">&#34;1.1.1.1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">db_user</span><span class="o">=</span><span class="s2">&#34;example_user&#34;</span> <span class="c1"># 数据库用户 (Mailu使用宿主机PostgreSQL时使用)</span>
</span></span><span class="line"><span class="cl"><span class="nv">db_passwd</span><span class="o">=</span><span class="s2">&#34;example_password&#34;</span> <span class="c1"># 数据库密码 (Mailu使用宿主机PostgreSQL时使用)</span>
</span></span><span class="line"><span class="cl"><span class="nv">db_name</span><span class="o">=</span><span class="s2">&#34;example_db&#34;</span> <span class="c1"># 数据库名称  (Mailu使用宿主机PostgreSQL时使用)</span>
</span></span><span class="line"><span class="cl"><span class="nv">http_port</span><span class="o">=</span><span class="s2">&#34;8080&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">https_port</span><span class="o">=</span><span class="s2">&#34;8443&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">cert_path</span><span class="o">=</span><span class="s2">&#34;/ssl/path/to/cert/&#34;</span> <span class="c1"># 证书存放目录</span>
</span></span><span class="line"><span class="cl"><span class="nv">cert_file</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">cert_path</span><span class="si">}</span><span class="s2">/cert.pem&#34;</span> <span class="c1"># 域名证书</span>
</span></span><span class="line"><span class="cl"><span class="nv">key_file</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">cert_path</span><span class="si">}</span><span class="s2">/key.pem&#34;</span> <span class="c1"># 域名证书密钥</span>
</span></span><span class="line"><span class="cl"><span class="nv">ca_file</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">cert_path</span><span class="si">}</span><span class="s2">/intermediate_CA.pem&#34;</span> <span class="c1"># 域名证书颁发者证书</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外，由于webmail对 <code>S/MIME</code> 与 <code>PGP/MIME</code> 的支持并不好，我们将在服务器上禁止
webmail，使用本地的邮件客户端收发邮件，以便更好的使用加密、签名功能，如有需要请自行开启webmail。</p>]]></description>
</item><item>
    <title>GPG 入门指北</title>
    <link>https://blog.ginshio.org/2020/gpg_started_guide/</link>
    <pubDate>Sat, 14 Nov 2020 18:14:39 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2020/gpg_started_guide/</guid>
    <description><![CDATA[<p>Pretty Good Privacy (<strong>PGP</strong>)，是一套用于讯息加密、验证的应用程序，由 <a href="https://en.wikipedia.org/wiki/Phil_Zimmermann" target="_blank" rel="noopener noreferrer">Phil
Zimmermann</a> 于1991年发布，由一系列散列、数据压缩、对称密钥加密以及公钥加密的算法组合而成。GNU Privacy Guard (<strong>GPG</strong>)，是一个用于加密、签名通信内容以及管理非对称密钥的自由软件，遵循IETF订定的 <a href="https://tools.ietf.org/html/rfc4880" target="_blank" rel="noopener noreferrer">OpenPGP技术标准</a> 设计，并与PGP保持兼容。</p>
<p>GPG的基于现代密码学，主要是对非对称加密的应用，由于自己本身是菜鸡，又没有学过密码学，所以对于以下加密方式进行简单的介绍，如有不准确请指正。</p>
<dl>
<dt>对称加密</dt>
<dd>又称私钥加密，这类算法在加密与解密时使用 <strong>相同的</strong> 的密钥，通信双方在通信之前需要协商一个密钥。对称加密简单、高效，加密强度随密钥长度的增加而增加，常见加密算法 <code>DES</code>、<code>ChaCha20</code>、<code>AES</code> 等</dd>
<dt>非对称加密</dt>
<dd>又称公开密钥加密，这类算法采用公钥加密私钥解密，公钥可以随意发布，私钥必须由用户严格保管，通信双方在通信时使用对方的公钥加密自己的信息。非对称加密的数学基础是<strong>超大整数的因数分解</strong>、<strong>整数有限域离散对数</strong>、<strong>椭圆曲线离散对数</strong>等问题的复杂性。数字签名也是基于非对称加密实现，简单地说即将文件散列后使用私钥加密生成签名，验证时散列文件并与公钥解密签名的值做对比进行验证，数字签名可以验证文件完整性，也有防止伪造的作用。常见的加密算法有 <code>DSA</code>、<code>RSA</code>、<code>ECDSA</code> 等</dd>
</dl>
<h2 id="初体验" class="headerLink">
    <a href="#%e5%88%9d%e4%bd%93%e9%aa%8c" class="header-mark"></a>初体验</h2><h3 id="生成" class="headerLink">
    <a href="#%e7%94%9f%e6%88%90" class="header-mark"></a>生成</h3><p>使用 <code>--generate-key</code> 参数可以创建一个使用默认值的密钥对，如果想设置更多的值可以使用 <code>--full-generate-key</code> 参数，如果再加上 <code>--expert</code> 开启专家模式，专家模式允许你自己选择 <strong>不同的加密算法</strong> 与 <strong>不同的密钥种类</strong>，在此仅介绍
<code>--full-generate-key</code> 参数。</p>
<dl>
<dt>选择你希望的密钥种类</dt>
<dd>我们选择默认的 <span class="underline">RSA and RSA</span>，会生成采用RSA算法且拥有加密、签名、验证功能的密钥</dd>
<dt>密钥长度</dt>
<dd><a href="https://www.keylength.com/en/4/" target="_blank" rel="noopener noreferrer">NIST建议</a> 2030年之前推荐的最小密钥长度，对称加密 <strong>128bit</strong> ，非对称加密
<strong>2048bit</strong> ，椭圆曲线密码学 <strong>224bit</strong></dd>
<dt>使用期限</dt>
<dd>默认为永久(0)，在这里我们选择1天 (1)</dd>
</dl>
<p>我们生成了一个密钥对，可以看到一些关于新生成的密钥的信息，包括了密钥长度、uid、指纹，我们一般使用指纹来分别不同的密钥，指纹是用40位16进制数字表示的串，我们一般使用<strong>邮箱</strong>、<strong>整串</strong>或<strong>串的最后16位</strong>区分密钥。</p>
<figure>
</figure>

<h3 id="备份" class="headerLink">
    <a href="#%e5%a4%87%e4%bb%bd" class="header-mark"></a>备份</h3><p>我们采用最朴素的方式保存密钥 —— 本地存储，但是请记住一点，私钥一定不能丢失或外泄。为了以防万一，我们生成一份<strong>吊销证书</strong>，用以在特殊情况时吊销该密钥，当然吊销证书也应该妥善保管。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gpg -a --export EFC4B50FE8F8B2B3 &gt; test.pub <span class="c1"># 导出公钥</span>
</span></span><span class="line"><span class="cl">gpg -a --export-secret-key EFC4B50FE8F8B2B3 &gt; test.sec <span class="c1"># 导出私钥</span>
</span></span><span class="line"><span class="cl">gpg -a --gen-revoke EFC4B50FE8F8B2B3 &gt; test.rev <span class="c1"># 生成吊销证书</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="发布" class="headerLink">
    <a href="#%e5%8f%91%e5%b8%83" class="header-mark"></a>发布</h3><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>警告<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">将公钥发布到密钥服务器上是不可逆行为，请谨慎操作</div>
        </div>
    </div>
<p>首先列出常用的密钥服务器</p>]]></description>
</item><item>
    <title>在服务器上部署一些服务</title>
    <link>https://blog.ginshio.org/2020/service/</link>
    <pubDate>Tue, 13 Oct 2020 20:16:45 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2020/service/</guid>
    <description><![CDATA[<p>个人使用的是腾讯云的轻量服务器，系统镜像选择的是 Debian 11，搭建的服务有 博客
<a href="https://gohugo.io/" target="_blank" rel="noopener noreferrer">HUGO</a> 、私有网盘 <a href="https://nextcloud.com/" target="_blank" rel="noopener noreferrer">Nextcloud</a> 以及 Git服务器 <a href="https://about.gitlab.com/" target="_blank" rel="noopener noreferrer">GitLab</a></p>
<p>目前使用的是 Debian GNU/Linux 11 (bullseye) 搭建服务器，当然用的是 fish 作为
shell</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fish" data-lang="fish"><span class="line"><span class="cl"><span class="nf">bash</span> <span class="na">-c</span> <span class="s2">&#34;cat &lt;&lt;- EOF | sudo tee /etc/apt/sources.list
</span></span></span><span class="line"><span class="cl"><span class="s2">deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free
</span></span></span><span class="line"><span class="cl"><span class="s2">deb https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free
</span></span></span><span class="line"><span class="cl"><span class="s2">deb https://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free
</span></span></span><span class="line"><span class="cl"><span class="s2">deb https://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib non-free
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2"># deb-src https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free
</span></span></span><span class="line"><span class="cl"><span class="s2"># deb-src https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free
</span></span></span><span class="line"><span class="cl"><span class="s2"># deb-src https://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free
</span></span></span><span class="line"><span class="cl"><span class="s2"># deb-src https://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib non-free
</span></span></span><span class="line"><span class="cl"><span class="s2">EOF&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nf">sudo</span> <span class="nf">apt</span> update <span class="na">-y</span> <span class="o">&amp;&amp;</span> <span class="nf">sudo</span> <span class="nf">apt</span> upgrade <span class="na">-y</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一下服务搭建时，域名统一使用 example.com，请根据自己的情况修改对应的配置，用到一些基础依赖请自行安装</p>]]></description>
</item></channel>
</rss>
