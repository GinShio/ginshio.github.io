<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Applications - 分类 - iris</title>
        <link>https://blog.ginshio.org/categories/applications/</link>
        <description>Applications - 分类 - iris</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>ginshio78@gmail.com (GinShio)</managingEditor>
            <webMaster>ginshio78@gmail.com (GinShio)</webMaster><lastBuildDate>Sat, 27 Aug 2022 14:03:31 &#43;0800</lastBuildDate><atom:link href="https://blog.ginshio.org/categories/applications/" rel="self" type="application/rss+xml" /><item>
    <title>在 Windows 的 Git Bash 中使用包管理器</title>
    <link>https://blog.ginshio.org/2022/git_bash_with_pacman_on_windows/</link>
    <pubDate>Sat, 27 Aug 2022 14:03:31 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2022/git_bash_with_pacman_on_windows/</guid>
    <description><![CDATA[Windows 中，在安装 Git Bash 时，会安装一个最小化的 Msys 环境，用于提供 Uinx 兼容层。单独安装一个 msys 不如直接使用 Git 引入的来的爽。
另外还有些好处，比如安装依赖只需要从包管理器安装，而无需到处找官网安装配环境。
安装 GitGit 的安装应该是都会的，但还是应该说以下，在 Windows 上安装 git 时，实际上是有很多细节需要注意的。
选择 git 使用的默认的编辑器
实际上，git 已经在这里说的很明白了，默认 vim 是一个历史原因，推建我们使用更现代的 GUI 编辑器。实际上，你可以使用 core.editor 来修改你想使用的编辑器。当然，如果你不设置这个值，git 会用环境变量中的 EDITOR 作为默认编辑器使用，而 Unix 世界中，EDITOR 往往是 Vi 或 Vim。
最后说一下我的习惯，我并不喜欢 Vim，但是配置了的 Emacs 打开太慢了，由其是简单的写一个 message (VSCode 人称小 emacs)，所以我更偏向于终端编辑器 GNU Nano，图形编辑器则更喜欢用 Kate。
初始化新仓库时的默认分值名称
你可以使用 init.defaultbranch 来更改默认的分支名称。
环境变量的作用域
我更推建第一种使用方式，我们只会在 Git-Bash 中使用 Unix tools。这样现得我们的环境变量更为干净。其实在 Powershell 中还好，在 CMD Prompt 中使用 [ 也太精分了。
换行符转换]]></description>
</item><item>
    <title>openSUSE 下 HP 打印机配置</title>
    <link>https://blog.ginshio.org/2022/hp_printer_driver/</link>
    <pubDate>Sun, 27 Feb 2022 18:49:18 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2022/hp_printer_driver/</guid>
    <description><![CDATA[正好家里买了打印机，HP 4800 系列，耗材是真便宜，喷墨是真慢啊。不过正好记录一下 Linux 下的 HP 打印机配置过程。
另外 HP 对开源的态度真不错，估计也是因为自家是开源大厂的缘故吧。
信息 本文主要是 openSUSE 配置 HP 打印机的过程 安装驱动Linux 下有 HP 官方的打印机驱动，称为 HPLIP (HP&rsquo;s Linux Imaging and Printing software)，可以查看 HPLIP 文档 或者 下载。
对于 HPLIP 可以在以下 Linux 发行版进行自动安装
SUSE Linux (13.2, 42.1, 42.2, 42.3, 15.0, 15.1, 15.2, 15.3) Fedora (22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35) Linux Mint (18, 18.1, 18.2, 18.3, 19, 19.1, 19.2, 19.]]></description>
</item><item>
    <title>使用 KMS 激活 Microsoft 软件</title>
    <link>https://blog.ginshio.org/2021/kms/</link>
    <pubDate>Sun, 09 May 2021 18:28:44 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2021/kms/</guid>
    <description><![CDATA[微软的软件主要可以通过以下三个渠道获取:
零售 原始设备制造商 (OEM) 批量许可协议 OEM 在工厂执行激活，比如说新买的笔记本电脑自带的系统就是这种方式。零售主要通过联机、电话或 VAMT 代理激活。批量激活产品主要选择 MAK (多次激活密钥) 、 KMS (密钥管理服务) 以及 AD (Active Directory) 进行激活。
KMS 可以在本地网络完成激活，而无需将个别计算机连接到 Microsoft 进行产品激活。KMS 不需要专用系统的轻型服务，可以轻易地将其联合托管在提供其他服务的系统上。
KMS 服务器可以为局域网内所有连接的产品进行周期性激活，激活周期一般为 180 天，产品激活后会定期连接 KMS 服务器进行验证、续期，如果不能连接到服务器在激活周期过后，产品将过期而需要重新激活。
KMS 服务激活的是 VL 版，而我们常用的 RTL (零售版) 是无法激活的。自己搭建 KMS 服务器激活产品，虽然可以正常使用，但是不能算正版软件，请支持正版！
部署 KMS 服务器常用的 Microsoft KMS 服务器是开源的 Vlmcsd，它可以部署到不同平台上提供服务。 Vlmcsd 的使用很简单，下载下来启动即可提供服务，默认端口号是 1688
Windows对于 Windows 的下载，可以选择 官方渠道 或通过 MSDN, I tell you 进行下载，安装的专业版均可以 KMS 激活
激活 Windows相对来说激活 Windows 也很简单，以管理员身份打开 Powershell 或命令提示符，并输入命令即可激活
设置 GVLK，这里我们以 Windows Server 2016 标准版为例 1 slmgr /ipk WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY 设置 KMS 服务器 1 slmgr /skms example.]]></description>
</item><item>
    <title>使用 steamcmd 搭建游戏服务器</title>
    <link>https://blog.ginshio.org/2021/steam_apps/</link>
    <pubDate>Mon, 22 Feb 2021 22:23:47 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2021/steam_apps/</guid>
    <description><![CDATA[和好友联机的时候本地服务器实在是不爽，一个人起飞，其他人都是高PING战士，最开始主要是 L4D2 时各种 RPG 服务器有些不爽，为了纯净的服务器只好自己建了
事先声明，我们所有的操作在 Debian / Ubuntu 下操作，有些操作系统可能会不一样，不过大同小异，我们还是定义一些等等可能用到的变量 (主要是路径和密码之类的
1 2 3 4 5 6 7 8 9 10 11 12 13 14 steam=/home/steam group_id=123456789 l4d2=${steam}/l4d2 l4d2_id=222860 l4d2_server_name=&#34;L4D2 Server&#34; l4d2_port=1024 valheim=${steam}/valheim valheim_id=896660 valheim_server_name=&#34;Valheim Server&#34; valheim_world=&#34;World&#34; valheim_port=1024 valheim_passwd=valheim_password dst=${steam}/dst dst_id=343050 SteamCMD顾名思义，steamcmd 是一个命令行工具，同时支持 linux，是我们搭建服务器的好帮手，然而我不会用，不过这不重要，安装跑起来就好
1 2 3 4 add-apt-repository multiverse dpkg --add-architecture i386 apt update &amp;&amp; apt upgrade apt install -y lib32gcc1 steamcmd 我们不仅要安装一个 steamcmd，还要将所有游戏服务器，存放在 ~steam 下，使用 steam 这个用户来运行游戏
1 2 adduser --disabled-login --gecos &#39;Steam&#39; steam sudo -u steam -H ln -s /usr/games/steamcmd ${steam}/steamcmd 语法这里说的语法并不是 SteamCMD 的语法，而是 Steam 中所使用的文本标记语法，这些标记标签允许您为您的留言及发帖文字添加格式，类似于 HTML，官方展示在这里]]></description>
</item><item>
    <title>搭建邮箱服务器</title>
    <link>https://blog.ginshio.org/2020/mail_server/</link>
    <pubDate>Mon, 16 Nov 2020 22:43:53 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2020/mail_server/</guid>
    <description><![CDATA[搭建邮局服务器的想法之前一直都有，不过一直没有尝试，国庆的时候从阿里云换到了腾讯云的时候尝试直接使用 postfix 和 dovecot 搭建，尝试了大概3天被劝退了，重新使用现成的解决方案也算终于搭建好了，可以愉快的使用自建邮箱了 (可以愉快的装逼了
信息 更新了 mailu 的搭建，虽然 mailu 相比 mailcow 可以使用宿主机的数据库，不过 mailu 配置 SMTPS / IMAPS / POP3S 不如 mailcow 简单方便，也没怎么研究，目前没有切换到 mailu 的打算 警告 打算在更换服务器之后不再维护邮箱服务，装逼不存在的 部署开始搭建服务器，以下采用域名 (example.com) 和 IP (1.1.1.1)，安装在 /mailcow，使用主机的nginx反向代理，部署之前我们首先定义一些Shell变量，以便之后使用，请根据自己的需求更改
1 2 3 4 5 6 7 8 9 10 11 12 13 14 path_to=&#34;/path/to&#34; mailcow_path=&#34;${path_to}/mailcow&#34; # mailcow 所在目录 mailu_path=&#34;${path_to}/mailu&#34; mail_host=&#34;mail.example.com&#34; mail_ip=&#34;1.1.1.1&#34; db_user=&#34;example_user&#34; # 数据库用户 (Mailu使用宿主机PostgreSQL时使用) db_passwd=&#34;example_password&#34; # 数据库密码 (Mailu使用宿主机PostgreSQL时使用) db_name=&#34;example_db&#34; # 数据库名称 (Mailu使用宿主机PostgreSQL时使用) http_port=&#34;8080&#34; https_port=&#34;8443&#34; cert_path=&#34;/ssl/path/to/cert/&#34; # 证书存放目录 cert_file=&#34;${cert_path}/cert.]]></description>
</item><item>
    <title>GPG 入门指北</title>
    <link>https://blog.ginshio.org/2020/gpg_started_guide/</link>
    <pubDate>Sat, 14 Nov 2020 18:14:39 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2020/gpg_started_guide/</guid>
    <description><![CDATA[Pretty Good Privacy (PGP)，是一套用于讯息加密、验证的应用程序，由 Phil Zimmermann 于1991年发布，由一系列散列、数据压缩、对称密钥加密以及公钥加密的算法组合而成。GNU Privacy Guard (GPG)，是一个用于加密、签名通信内容以及管理非对称密钥的自由软件，遵循IETF订定的 OpenPGP技术标准 设计，并与PGP保持兼容。
GPG的基于现代密码学，主要是对非对称加密的应用，由于自己本身是菜鸡，又没有学过密码学，所以对于以下加密方式进行简单的介绍，如有不准确请指正。
对称加密 又称私钥加密，这类算法在加密与解密时使用 相同的 的密钥，通信双方在通信之前需要协商一个密钥。对称加密简单、高效，加密强度随密钥长度的增加而增加，常见加密算法 DES、ChaCha20、AES 等 非对称加密 又称公开密钥加密，这类算法采用公钥加密私钥解密，公钥可以随意发布，私钥必须由用户严格保管，通信双方在通信时使用对方的公钥加密自己的信息。非对称加密的数学基础是超大整数的因数分解、整数有限域离散对数、椭圆曲线离散对数等问题的复杂性。数字签名也是基于非对称加密实现，简单地说即将文件散列后使用私钥加密生成签名，验证时散列文件并与公钥解密签名的值做对比进行验证，数字签名可以验证文件完整性，也有防止伪造的作用。常见的加密算法有 DSA、RSA、ECDSA 等 初体验 生成使用 --generate-key 参数可以创建一个使用默认值的密钥对，如果想设置更多的值可以使用 --full-generate-key 参数，如果再加上 --expert 开启专家模式，专家模式允许你自己选择 不同的加密算法 与 不同的密钥种类，在此仅介绍 --full-generate-key 参数。
选择你希望的密钥种类 我们选择默认的 RSA and RSA，会生成采用RSA算法且拥有加密、签名、验证功能的密钥 密钥长度 NIST建议 2030年之前推荐的最小密钥长度，对称加密 128bit ，非对称加密 2048bit ，椭圆曲线密码学 224bit 使用期限 默认为永久(0)，在这里我们选择1天 (1) 我们生成了一个密钥对，可以看到一些关于新生成的密钥的信息，包括了密钥长度、uid、指纹，我们一般使用指纹来分别不同的密钥，指纹是用40位16进制数字表示的串，我们一般使用邮箱、整串或串的最后16位区分密钥。
备份我们采用最朴素的方式保存密钥 —— 本地存储，但是请记住一点，私钥一定不能丢失或外泄。为了以防万一，我们生成一份吊销证书，用以在特殊情况时吊销该密钥，当然吊销证书也应该妥善保管。
1 2 3 gpg -a --export EFC4B50FE8F8B2B3 &gt; test.pub # 导出公钥 gpg -a --export-secret-key EFC4B50FE8F8B2B3 &gt; test.]]></description>
</item><item>
    <title>在服务器上部署一些服务</title>
    <link>https://blog.ginshio.org/2020/service/</link>
    <pubDate>Tue, 13 Oct 2020 20:16:45 &#43;0800</pubDate><author>
                        <name>GinShio</name><uri>https://blog.ginshio.org/</uri><email>ginshio78@gmail.com</email></author><guid>https://blog.ginshio.org/2020/service/</guid>
    <description><![CDATA[个人使用的是腾讯云的轻量服务器，系统镜像选择的是 Debian 11，搭建的服务有 博客 HUGO 、私有网盘 Nextcloud 以及 Git服务器 GitLab
目前使用的是 Debian GNU/Linux 11 (bullseye) 搭建服务器，当然用的是 fish 作为 shell
1 2 3 4 5 6 7 8 9 10 11 12 bash -c &#34;cat &lt;&lt;- EOF | sudo tee /etc/apt/sources.list deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free deb https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free deb https://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free deb https://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib non-free # deb-src https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free # deb-src https://mirrors.]]></description>
</item></channel>
</rss>
